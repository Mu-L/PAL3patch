【应对循环中，结构体数组偏移在中间的办法】
struct X {
    int a;
    int b;
    int c;
}
int *p = &somebigstruct.X[0].b;
while (...) {
    p-1  // == &a
    p    // == &b
    p+1  // == &c
    
    p += 3; // p = (int)p + sizeof(X)
}


方法：添加新的辅助结构体定义，将指针转换为新结构体指针即可（要注意对齐问题）
缺点：会生成很多相似的结构体，不好维护一致性
struct X_offset_b {
    int b;
    int c;
    // may be padding here
    int next_a;
}








【应对后加结构体（访问成员时才加）偏移的办法】

以下面这个结构体为例

00000000 CCBAttackSequen struc ; (sizeof=0x1C8, align=0x4, copyof_1825)
00000000 m_pCBSystem     dd ?                    ; offset
00000004 m_pUI           dd ?                    ; offset
00000008 m_pRole         dd ?                    ; offset
0000000C m_Sequen        tagAttackSequen 11 dup(?) // 结构体数组的偏移为 0xC
000001C4 m_bEnable       db ?
000001C5 m_bPause        db ?
000001C6 m_bVisible      db ?
000001C7 m_bLocked       db ?
000001C8 CCBAttackSequen ends

00000000 tagAttackSequen struc ; (sizeof=0x28, align=0x4, copyof_1824)
00000000                                         ; XREF: CCBAttackSequen/r
00000000 fDeltaTime      dd ?
00000004 fLastTime       dd ?
00000008 nIndex          dd ?
0000000C dwID            dd ?
00000010 pPic            dd ?                    ; offset
00000014 nSlot1          dd ?
00000018 nSlot2          dd ?
0000001C nRound          dd ?
00000020 bySpeed1        db ?
00000021 bySpeed2        db ?
00000022 bSlot2Running   db ?
00000023 bPaused         db ?
00000024 bValid          db ?
00000025                 db ? ; undefined
00000026                 db ? ; undefined
00000027                 db ? ; undefined
00000028 tagAttackSequen ends

void __thiscall CCBAttackSequen::SetToStart(CCBAttackSequen *this, int nIndex)
{
  int v2; // eax@1

  v2 = (int)this + 40 * nIndex; // 一开始没有加结构体偏移 0xC
  *(_DWORD *)(v2 + 32) = 0;                     // 在访问 nSolt1 成员时，加了偏移 0xC
  *(_DWORD *)(v2 + 36) = 0;                     // nSolt2
  *(_BYTE *)(v2 + 46) = 0;                      // bSlot2Running
}

void __thiscall CCBAttackSequen::SetToStart(CCBAttackSequen *this, int nIndex)
{
  CCBAttackSequen *v2; // eax@1

// 方法：设置v2为大结构体类型即可查看对于结构体域中的名称（虽然下标0是错的，但是省去人工计算偏移的麻烦）
  v2 = (CCBAttackSequen *)((char *)this + 40 * nIndex);
  v2->m_Sequen[0].nSlot1 = 0;                   // nSolt1
  v2->m_Sequen[0].nSlot2 = 0;                   // nSolt2
  v2->m_Sequen[0].bSlot2Running = 0;            // bSlot2Running
}








【当帧率较高时（约2500FPS），游戏中战斗时，人物行动条可能会变慢或卡住：fixattacksequen】

这是因为行动条的进度是用0-11500之间的一个整数来表示的，每一帧之间更新的公式是：
    value += deltatime * 50.0 * speed;
其中deltatime为1.0/fps；speed为5*(角色速度+4)
当fps很高时，deltatime很小，由于在浮点数转换为整数时需要向下取整，导致差值被舍入没了
从游戏界面上来看，就是行动条移动极其缓慢

解决办法是，重写了CCBAttackSequen::RunOneStep函数，其内部保留浮点和整数两种类型，并且优先使用浮点


用来计算相对误差的C程序：

#include <stdio.h>
#include <math.h>

double calc_error(int rolespeed, int fps)
{
    double speed = 5 * (rolespeed + 4); // 内部速度=5*(角色速度+4)
    double deltatime = 1.0 / fps;
    double value = deltatime * 50.0 * speed;
    return (value - floor(value)) / value;
}

#define FPS_LOW 10
#define FPS_HIGH 3000
#define FPS_STEP 10

#define SPEED_LOW 3
#define SPEED_HIGH 9

int main()
{
    int fps;
    int rolespeed;

    printf("%-10s", "fps\\speed");
    for (rolespeed = SPEED_LOW; rolespeed <= SPEED_HIGH; rolespeed++) {
        printf("%-10d", rolespeed);
    }
    printf("\n");
    
    for (fps = FPS_LOW; fps <= FPS_HIGH; fps += FPS_STEP) {
        printf(" %-9d", fps);
        for (rolespeed = SPEED_LOW; rolespeed <= SPEED_HIGH; rolespeed++) {
            printf("%-10.5f", calc_error(rolespeed, fps));
        }
        printf("\n");
    }

    return 0;
}


误差表（舍入掉的部分占总数值的比例）：

（100fps以内，误差很小，不超过2%，可以忽略）
fps\speed 3         4         5         6         7         8         9         
 10       0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   
 20       0.00571   0.00000   0.00444   0.00000   0.00364   0.00000   0.00308   
 30       0.00571   0.01000   0.00000   0.00400   0.00727   0.00000   0.00308   
 40       0.01714   0.00000   0.00444   0.00800   0.01091   0.00000   0.00308   
 50       0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   
 60       0.00571   0.01000   0.01333   0.01600   0.01818   0.00000   0.00308   
 70       0.00000   0.02000   0.00444   0.02000   0.00727   0.02000   0.00923   
 80       0.04000   0.00000   0.00444   0.00800   0.01091   0.01333   0.01538   
 90       0.02286   0.01000   0.00000   0.02800   0.01818   0.01000   0.00308   

（当fps很大时，误差变得不可忽略，人物速度越大越不易受影响）
fps\speed 3         4         5         6         7         8         9         
 100      0.02857   0.00000   0.02222   0.00000   0.01818   0.00000   0.01538   
 200      0.08571   0.00000   0.02222   0.04000   0.05455   0.00000   0.01538   
 300      0.14286   0.10000   0.06667   0.04000   0.01818   0.00000   0.07692   
 400      0.08571   0.00000   0.11111   0.04000   0.12727   0.06667   0.01538   
 500      0.14286   0.00000   0.11111   0.00000   0.09091   0.00000   0.07692   
 600      0.31429   0.10000   0.20000   0.04000   0.12727   0.00000   0.07692   
 700      0.20000   0.30000   0.06667   0.16000   0.23636   0.06667   0.13846   
 800      0.08571   0.20000   0.28889   0.04000   0.12727   0.20000   0.01538   
 900      0.48571   0.10000   0.20000   0.28000   0.01818   0.10000   0.16923   
 1000     0.42857   0.00000   0.11111   0.20000   0.27273   0.00000   0.07692   
 1100     0.37143   0.45000   0.02222   0.12000   0.20000   0.26667   0.32308   
 1200     0.31429   0.40000   0.46667   0.04000   0.12727   0.20000   0.26154   
 1300     0.25714   0.35000   0.42222   0.48000   0.05455   0.13333   0.20000   
 1400     0.20000   0.30000   0.37778   0.44000   0.49091   0.06667   0.13846   
 1500     0.14286   0.25000   0.33333   0.40000   0.45455   0.00000   0.07692   
 1600     0.08571   0.20000   0.28889   0.36000   0.41818   0.46667   0.01538   
 1700     0.02857   0.15000   0.24444   0.32000   0.38182   0.43333   0.47692   
 1800     1.00000   0.10000   0.20000   0.28000   0.34545   0.40000   0.44615   
 1900     1.00000   0.05000   0.15556   0.24000   0.30909   0.36667   0.41538   
 2000     1.00000   0.00000   0.11111   0.20000   0.27273   0.33333   0.38462   
 2100     1.00000   1.00000   0.06667   0.16000   0.23636   0.30000   0.35385   
 2200     1.00000   1.00000   0.02222   0.12000   0.20000   0.26667   0.32308   
 2300     1.00000   1.00000   1.00000   0.08000   0.16364   0.23333   0.29231   
 2400     1.00000   1.00000   1.00000   0.04000   0.12727   0.20000   0.26154   
 2500     1.00000   1.00000   1.00000   0.00000   0.09091   0.16667   0.23077   
 2600     1.00000   1.00000   1.00000   1.00000   0.05455   0.13333   0.20000   
 2700     1.00000   1.00000   1.00000   1.00000   0.01818   0.10000   0.16923   
 2800     1.00000   1.00000   1.00000   1.00000   1.00000   0.06667   0.13846   
 2900     1.00000   1.00000   1.00000   1.00000   1.00000   0.03333   0.10769   
 3000     1.00000   1.00000   1.00000   1.00000   1.00000   0.00000   0.07692  


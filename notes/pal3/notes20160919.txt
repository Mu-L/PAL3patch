【PAL3中_PlugInfo可能就是_TextureInfo】
在PAL3中，可能并没有_PlugInfo这个结构体，它就是_TextureInfo

【初识gbEffectMgr和gbRenderEffect】
gbRenderEffect封装了ID3DXEffect
可以用gbEffectMgr::NewRenderEffect(mgr, "path/to/gbf/file", flag)创建新gbRenderEffect对象
这个函数内部调用的是D3DXCreateEffect()
参考：《游戏开发编程基础》第19章 效果框架

【UI相关gbf文件】
在UIInitSystem()函数中可以看到，初始化UI系统时，创建了许多不同的gbRenderEffect
打开它们对应的gbf文件可以看到，效果文件中主要对d3d的设备状态进行了一番设置

有TL=>XYZRHW
无TL=>XYZ

// alphablend参考第7章 融合技术
ui_tex_color   => SrcBlend=SRCALPHA   DestBlend=ONE          ColorOp=MODULATE
ui_tex_vcolor  => SrcBlend=SRCALPHA   DestBlend=INVSRCALPHA  ColorOp=ADD

ui_par_tex_color貌似与ui_tex_color没什么区别


【修正UI的下一步计划】
反思：
    现有的框架（如战斗界面修正、剧情对话修正）的问题：
        (1)需要太多人工查找、编写代码的地方，很麻烦
        (2)不能随意缩放元素大小，只能调整位置
        (3)不能兼容2x放大后的贴图
    需要推倒重来！！！当然，其中部分代码可以重用。
计划：
 1.搞清楚gbUIQuad结构体中每一个值的含义
 2.通过直接钩住PAL3.EXE的导入表的方式（导入表只需硬编码地址，不需动态查找），
    钩住gbDynVertBuf::RenderUIQuad
    在每次调用前，根据标志（见后）对gbUIQuad进行变换
 3.变换具体方式：
    (1)不变换
        什么变换都不做
        应用场景：未知、默认的情况
    (2)按比例变换
        将原来的800x600画面直接按比例放大到屏幕上，如是宽屏则两边留白（黑边）
        此种变换最为简单，无需太多人工介入（如修改代码等），适合复杂界面懒得修改的情况
        应用场景：欢迎界面、主系统界面、买卖界面等
    (3)按位置变换
        参数：左右位置（左对齐、右对齐、居中），上下位置（类似），缩放因子
        此种变换会将界面元素扩大“缩放因子”倍，但是对齐方式不变。
        缩放因子在同一屏幕上必须相同，这样才能保证元素不错位。
        应用场景：战斗界面，小游戏界面
        缺点：必须为每个元素标定对齐方式！还需要在场景开始时设置缩放因子！麻烦！（估计这就是宿命！）
可能的问题：
 1.鼠标点击的位置仍然不对！因为RenderUIQuad只负责绘画，不负责交互。
    这一点很麻烦，对于每种变换方式需要采取不同的方案，可能的解决方案如下：
    (1)不变换：什么都不用做hahaha
    (2)按比例变换：通过对GetCursorPos_wrapper进行hook，直接缩放鼠标指针位置
        让程序以为鼠标仍在800x600范围内，这一方案有点像DPI虚拟化
        可能的不足：也许游戏还使用了DirectInput作为鼠标输入？（也许并没有？）
        编程上的注意：GetCursorPos_wrapper已经被窗口化补丁hook过一遍了，需要仔细处理！
    (3)按位置变换：这个最复杂！
        需要手动处理每种情况，不过绘制也需要手动处理。。。
        可能的不足：为鼠标在抽象出来的类做一遍变换、为绘制在底层gbUIQuad又做一遍变换，
                 有代码重复！！！怎么消除？？？或许需要与RenderUIQuad脱离，做成独立模块！
 2.gbUIQuad与RECT都有表示元素位置的功能，如果要为它们俩单独各写一份代码，有代码重复！很麻烦！
    需要仔细设计接口！
 3.放大2x贴图的处理！只修改RenderUIQuad并不能解决放大后贴图错乱的问题！
    现在还没有想到解决办法！！！或许只有单独手动修改具体的某个类的某个函数了。。。。。length
 4.贴图并不占满整个矩形的情况
    在“按位置变换”的情况下，如果贴图并不占满整个矩形（例如“重新来过”），会导致错位的问题。。
    好像没有什么好的解决办法，需要单独处理。（或许修改UIStatic的绘制逻辑？）
可能的代码实现方式：
 1.用全局变量的方式维护“变换方式”、“缩放因子”
 2.模块化实现针对gbUIQuad和RECT的变换代码
 3.针对UIStatic，可以利用结构体中用来数据对齐的空隙保存特定元素的对齐方式
    （不过用空隙之前需要仔细测试，确保不会被覆盖！）


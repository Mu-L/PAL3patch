【用PAL3A的GBENGINE.DLL替换PAL3的GBENGINE.DLL】
不可以，虽然能进入游戏，但是一加载存档就会崩溃

【apitrace】
http://apitrace.github.io
一个开源的API追踪工具
可以用它来追踪D3DX9的函数调用，支持replay和查看某个调用时DX的内部状态（比如当前贴图等，framebuffer内容）
但是貌似还是看不到调用者的地址
双击某个函数调用，可以看到该函数调用完成后，DX的内部状态（此过程需要从头replay，耗时较长）
在replay中会显示PAL3有bug（例如bufferoverflow），可能需要详细研究


【168纹理绘制2D图片的流程】
由于这种绘制中用到的顶点数据的大小共168字节，所以我称它为168纹理绘制流程。
首先用IDirect3DVertexBuffer9::Lock锁定一块大小为168字节的顶点缓存
    填入两个三角形，这对应着一块屏幕上的矩形区域（也就是要绘制2D图片的区域）
    一个顶点所用数据（由SetFVF函数的参数决定，共28字节）
        float x, y, z, rhw // D3DFVF_XYZRHW，此处的坐标为不经过变换的坐标，直接使用屏幕坐标
        DWORD color // D3DFVF_DIFFUSE
        float u, v // D3DFVF_TEX1
    两个三角形，每个三角形三个顶点，一共2*3*28=168字节
    顶点数据可以用apitrace的Vertex Data功能浏览，方法如下：
        选中Lock()和Unlock()直接的那个memcpy函数调用
        设置右侧Vertex Data栏中参数：Stride=0, Components=7, StartingOffset=0；
        再点击栏中Interpret按钮即可看到
然后把纹理用SetTexture指定为当前纹理
之后经过一系列SetRenderState，SetSamplerState的设置
最后DrawPrimitive进行绘制



【绘制剧情对话框的流程】
一般绘制剧情对话框的函数调用位于一帧画面的末尾
均使用168纹理绘制方式，但是之中可能有SetTransform出现（不知为何）
顺序如下：
    对话框左上角、对话框左下角、对话框右下角、对话框右上角、
    对话框左边缘、对话框下边缘、对话框右边缘、对话框上边缘、
    对话框中央部分、人物头像、文字、箭头、对话框下边缘装饰
文字绘制的细节：
    先把最近要使用的文字转换为一个贴图
    然后再使用绘制贴图的方法绘制文字
    但是绘制文字的顺序并不是按照文字的自然顺序
    另外文字的颜色并不是纯白，而是fffffafa
对话框“弹出”效果的过程：
    在“弹出”效果过程中，只绘制对话框的“角”、“边缘”、“中央”
    不绘制“人物头像”、“文字”、“箭头”、“对话框下边缘装饰”
    “弹出”效果中的对话框，最初是一个正方形，后来慢慢缩放到完整的大小
    完整的“弹出”效果播放后，才进入真正对话框的绘制
由于apitrace并不能看到调用者地址，所以目前还没找到这些功能对应的代码

